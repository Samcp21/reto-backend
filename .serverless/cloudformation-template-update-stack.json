{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ApiLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/reto-backend-dev-api"
      }
    },
    "EventHandlerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/reto-backend-dev-eventHandler"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "reto-backend",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/reto-backend-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/reto-backend-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:PutItem",
                    "dynamodb:GetItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:Scan",
                    "events:PutEvents"
                  ],
                  "Resource": [
                    "arn:aws:dynamodb:us-east-2:*:table/reto-backend-dev-PeopleTable",
                    "arn:aws:dynamodb:us-east-2:*:table/reto-backend-dev-HistoryTable",
                    "arn:aws:events:us-east-2:058264497369:event-bus/reto-backend-dev-EventBus"
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "reto-backend",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "ApiLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-2-5aaba69b-62a2",
          "S3Key": "serverless/reto-backend/dev/1731300635781-2024-11-11T04:50:35.781Z/api.zip"
        },
        "Handler": "dist/serverless.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "reto-backend-dev-api",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "NODE_ENV": "production",
            "PEOPLE_TABLE": "reto-backend-dev-PeopleTable",
            "HISTORY_TABLE": "reto-backend-dev-HistoryTable",
            "EVENT_BUS_NAME": "reto-backend-dev-EventBus"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ApiLogGroup"
      ]
    },
    "EventHandlerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-2-5aaba69b-62a2",
          "S3Key": "serverless/reto-backend/dev/1731300635781-2024-11-11T04:50:35.781Z/eventHandler.zip"
        },
        "Handler": "dist/serverless.eventHandler",
        "Runtime": "nodejs18.x",
        "FunctionName": "reto-backend-dev-eventHandler",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "NODE_ENV": "production",
            "PEOPLE_TABLE": "reto-backend-dev-PeopleTable",
            "HISTORY_TABLE": "reto-backend-dev-HistoryTable",
            "EVENT_BUS_NAME": "reto-backend-dev-EventBus"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "EventHandlerLogGroup"
      ]
    },
    "ApiLambdaVersion9kBle4q0LuGy2M46YRXL1UOsC29BYVEQfucfI1GEk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ApiLambdaFunction"
        },
        "CodeSha256": "ie2o35UoMBTq3HLME98qlIjNLsisbG+VzjrqX7+TcNc="
      }
    },
    "EventHandlerLambdaVersionpkOP8CAWNfJ4w3NQbtUpFuvBmFIIvJdt6l3TzGJdI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "EventHandlerLambdaFunction"
        },
        "CodeSha256": "ie2o35UoMBTq3HLME98qlIjNLsisbG+VzjrqX7+TcNc="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-reto-backend",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceApiDashsofttek": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "api-softtek",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiDashsofttekProxyVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApiDashsofttek"
        },
        "PathPart": "{proxy+}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiDashsofttekProxyVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiDashsofttekProxyVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiDashsofttekProxyVarAny": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "ANY",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiDashsofttekProxyVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ApiLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "ApiLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1731300619058": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodApiDashsofttekProxyVarOptions",
        "ApiGatewayMethodApiDashsofttekProxyVarAny"
      ]
    },
    "ApiLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ApiLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RetobackenddeveventHandlerrule1EventBridgeRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "EventPattern": {
          "source": [
            "reto-backend"
          ],
          "detail-type": [
            "request.history"
          ]
        },
        "Name": "reto-backend-dev-eventHandler-rule-1",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "EventHandlerLambdaFunction",
                "Arn"
              ]
            },
            "Id": "reto-backend-dev-eventHandler-rule-1-target"
          }
        ]
      }
    },
    "EventHandlerEventBridgeLambdaPermission1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "EventHandlerLambdaFunction",
            "Arn"
          ]
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            ":",
            [
              "arn",
              {
                "Ref": "AWS::Partition"
              },
              "events",
              {
                "Ref": "AWS::Region"
              },
              {
                "Ref": "AWS::AccountId"
              },
              {
                "Fn::Join": [
                  "/",
                  [
                    "rule",
                    "reto-backend-dev-eventHandler-rule-1"
                  ]
                ]
              }
            ]
          ]
        }
      }
    },
    "PeopleTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "reto-backend-dev-PeopleTable",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          },
          {
            "AttributeName": "status",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "TimeToLiveSpecification": {
          "AttributeName": "ttl",
          "Enabled": true
        },
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "status-index",
            "KeySchema": [
              {
                "AttributeName": "status",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ]
      }
    },
    "HistoryTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "reto-backend-dev-HistoryTable",
        "AttributeDefinitions": [
          {
            "AttributeName": "requestId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "requestId",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "EventBus": {
      "Type": "AWS::Events::EventBus",
      "Properties": {
        "Name": "reto-backend-dev-EventBus"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "serverless-framework-deployments-us-east-2-5aaba69b-62a2",
      "Export": {
        "Name": "sls-reto-backend-dev-ServerlessDeploymentBucketName"
      }
    },
    "ApiLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ApiLambdaVersion9kBle4q0LuGy2M46YRXL1UOsC29BYVEQfucfI1GEk"
      },
      "Export": {
        "Name": "sls-reto-backend-dev-ApiLambdaFunctionQualifiedArn"
      }
    },
    "EventHandlerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "EventHandlerLambdaVersionpkOP8CAWNfJ4w3NQbtUpFuvBmFIIvJdt6l3TzGJdI"
      },
      "Export": {
        "Name": "sls-reto-backend-dev-EventHandlerLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-reto-backend-dev-ServiceEndpoint"
      }
    }
  }
}